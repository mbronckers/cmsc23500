package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private TupleDesc td;
    private JoinPredicate pred;
    private OpIterator child1;
    private OpIterator child2;
    private Tuple t2;
    private HashMap<Object, ArrayList<Tuple>> hmap;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.pred = p;
        this.child1 = child1;
        this.child2 = child2;
        this.td = TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
        this.hmap = new HashMap<Object, ArrayList<Tuple>>();
    }

    public JoinPredicate getJoinPredicate() {
        return pred;
    }

    public TupleDesc getTupleDesc() {
        return td;
    }

    public String getJoinField1Name()
    {
        int f1 = pred.getField1();
        TupleDesc td1 = child1.getTupleDesc();
        return td1.getFieldName(f1);
    }

    public String getJoinField2Name()
    {
        int f2 = pred.getField2();
        TupleDesc td2 = child2.getTupleDesc();
        return td2.getFieldName(f2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
              
        super.open();
        child1.open();
        child2.open();
        hmap.clear();
        
        while (child1.hasNext()) {
            Tuple t1 = child1.next();
            Field f1 = t1.getField(pred.getField1());
            ArrayList<Tuple> entry = hmap.get(f1);
            if (entry == null) {
                entry = new ArrayList<Tuple>();
                hmap.put(f1, entry);
            }
            entry.add(t1);
        }
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
        hmap.clear();
        listIt = null;
        t2 = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();

        hmap.clear();
        
        while (child1.hasNext()) {
            Tuple t1 = child1.next();
            Field f1 = t1.getField(pred.getField1());
            ArrayList<Tuple> entry = hmap.get(f1);
            if (entry == null) {
                entry = new ArrayList<Tuple>();
                hmap.put(f1, entry);
            }
            entry.add(t1);
        }

        listIt = null;
        t2 = null;
    }

    transient Iterator<Tuple> listIt = null;

    private Tuple createMerged() {
        Tuple t1 = listIt.next();
        int numT1 = t1.getTupleDesc().numFields();
        Tuple merged = new Tuple(td);

        for (int i = 0; i < numT1; i++) {
            merged.setField(i, t1.getField(i));
        }
        for (int i = 0; i < t2.getTupleDesc().numFields(); i++) {
            merged.setField(i + numT1, t2.getField(i));
        }
        return merged; 
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (listIt != null && listIt.hasNext()) {
            return createMerged();
        }

        while (child2.hasNext()) {
            t2 = child2.next();
            ArrayList<Tuple> entry = hmap.get(t2.getField(pred.getField2()));
            if (entry != null) {
                listIt = entry.iterator();
                return createMerged();      
            }
        }

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        OpIterator[] children = new OpIterator[] {child1, child2};
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        child1 = children[0];
        child2 = children[1];
    }

}
